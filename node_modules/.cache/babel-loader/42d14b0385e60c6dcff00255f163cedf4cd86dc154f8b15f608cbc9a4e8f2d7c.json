{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/GAMMA TECH/to-do-app-react/src/components/Form/Form.jsx\",\n  _s = $RefreshSig$();\nimport { useContext, useState } from \"react\";\nimport { NoteContext } from \"../../context/NoteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = () => {\n  _s();\n  const [task, setTask] = useState('');\n  const [date, setDate] = useState('');\n  const [tag, setTag] = useState('');\n  const {\n    addTask,\n    message,\n    setMessage\n  } = useContext(NoteContext);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [relevance, setRelevance] = useState('');\n  const [sortDirection, setSortDirection] = useState('asc');\n  const submitNote = e => {\n    e.preventDefault();\n    addTask(task, date, currentDate, relevance, tag);\n    setTask('');\n    setTag('');\n    setDate('');\n    setCurrentDate('');\n    setRelevance('');\n  };\n  const handleSort = () => {\n    const newSortDirection = sortDirection === 'asc' ? 'desc' : 'asc';\n    setSortDirection(newSortDirection);\n    setMessage(sortNotes(message, newSortDirection));\n  };\n  const sortNotes = (notes, direction) => {\n    return [...notes].sort((a, b) => {\n      const aDate = new Date(a.date).getTime();\n      const bDate = new Date(b.date).getTime();\n      const compareResult = aDate - bDate;\n      return direction === 'asc' ? compareResult : -compareResult;\n    });\n  };\n  const sortedNotes = sortNotes(message, sortDirection);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(InputForm, {\n      addNote: addNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToDoList, {\n      note: note,\n      done: done,\n      deleteNote: deleteNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(Form, \"ikD8i0hYppe6XycNNunUd/MuGP4=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["useContext","useState","NoteContext","Form","task","setTask","date","setDate","tag","setTag","addTask","message","setMessage","currentDate","setCurrentDate","Date","relevance","setRelevance","sortDirection","setSortDirection","submitNote","e","preventDefault","handleSort","newSortDirection","sortNotes","notes","direction","sort","a","b","aDate","getTime","bDate","compareResult","sortedNotes","addNote","note","done","deleteNote"],"sources":["/Users/user/Desktop/GAMMA TECH/to-do-app-react/src/components/Form/Form.jsx"],"sourcesContent":["import { useContext, useState } from \"react\";\nimport { NoteContext } from \"../../context/NoteContext\";\n\n\n\nconst Form = () => {\n    const [task, setTask] = useState('')\n    const [date, setDate] = useState('')\n    const [tag, setTag] = useState('')\n    const { addTask, message, setMessage } = useContext(NoteContext)\n    const [currentDate, setCurrentDate] = useState(new Date())\n    const [relevance, setRelevance] = useState('')\n    const [sortDirection, setSortDirection] = useState('asc')\n\n    const submitNote = (e) => {\n        e.preventDefault()\n        addTask(task, date, currentDate, relevance, tag)\n        setTask('')\n        setTag('')\n        setDate('')\n        setCurrentDate('')\n        setRelevance('')\n    }\n\n    const handleSort = () => {\n        const newSortDirection = sortDirection === 'asc' ? 'desc' : 'asc';\n        setSortDirection(newSortDirection);\n        setMessage(sortNotes(message, newSortDirection));\n    }\n\n    const sortNotes = (notes, direction) => {\n        return [...notes].sort((a, b) => {\n            const aDate = new Date(a.date).getTime();\n            const bDate = new Date(b.date).getTime();\n            const compareResult = aDate - bDate;\n            return direction === 'asc' ? compareResult : -compareResult;\n        });\n    }\n\n    const sortedNotes = sortNotes(message, sortDirection);\n\n\n    return (\n        <div>\n            <InputForm addNote={addNote}/>\n            <ToDoList note={note} done = {done} deleteNote = {deleteNote}/>\n        </div>\n    )\n}\n\n\n\nexport default Form"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC5C,SAASC,WAAW,QAAQ,2BAA2B;AAAC;AAIxD,MAAMC,IAAI,GAAG,MAAM;EAAA;EACf,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,GAAG,EAAEC,MAAM,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM;IAAES,OAAO;IAAEC,OAAO;IAAEC;EAAW,CAAC,GAAGZ,UAAU,CAACE,WAAW,CAAC;EAChE,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAIc,IAAI,EAAE,CAAC;EAC1D,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMmB,UAAU,GAAIC,CAAC,IAAK;IACtBA,CAAC,CAACC,cAAc,EAAE;IAClBZ,OAAO,CAACN,IAAI,EAAEE,IAAI,EAAEO,WAAW,EAAEG,SAAS,EAAER,GAAG,CAAC;IAChDH,OAAO,CAAC,EAAE,CAAC;IACXI,MAAM,CAAC,EAAE,CAAC;IACVF,OAAO,CAAC,EAAE,CAAC;IACXO,cAAc,CAAC,EAAE,CAAC;IAClBG,YAAY,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,MAAMM,UAAU,GAAG,MAAM;IACrB,MAAMC,gBAAgB,GAAGN,aAAa,KAAK,KAAK,GAAG,MAAM,GAAG,KAAK;IACjEC,gBAAgB,CAACK,gBAAgB,CAAC;IAClCZ,UAAU,CAACa,SAAS,CAACd,OAAO,EAAEa,gBAAgB,CAAC,CAAC;EACpD,CAAC;EAED,MAAMC,SAAS,GAAG,CAACC,KAAK,EAAEC,SAAS,KAAK;IACpC,OAAO,CAAC,GAAGD,KAAK,CAAC,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC7B,MAAMC,KAAK,GAAG,IAAIhB,IAAI,CAACc,CAAC,CAACvB,IAAI,CAAC,CAAC0B,OAAO,EAAE;MACxC,MAAMC,KAAK,GAAG,IAAIlB,IAAI,CAACe,CAAC,CAACxB,IAAI,CAAC,CAAC0B,OAAO,EAAE;MACxC,MAAME,aAAa,GAAGH,KAAK,GAAGE,KAAK;MACnC,OAAON,SAAS,KAAK,KAAK,GAAGO,aAAa,GAAG,CAACA,aAAa;IAC/D,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,WAAW,GAAGV,SAAS,CAACd,OAAO,EAAEO,aAAa,CAAC;EAGrD,oBACI;IAAA,wBACI,QAAC,SAAS;MAAC,OAAO,EAAEkB;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAE,eAC9B,QAAC,QAAQ;MAAC,IAAI,EAAEC,IAAK;MAAC,IAAI,EAAIC,IAAK;MAAC,UAAU,EAAIC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAC7D;AAEd,CAAC;AAAA,GA3CKpC,IAAI;AAAA,KAAJA,IAAI;AA+CV,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}